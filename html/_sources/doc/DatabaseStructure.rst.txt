.. _database-page:

Database Structure and Query Syntax
=================================

|projname| stores the output of an analysis in a SQLite_ database. Database files are stored in the same directory as the data being processed. Each analysis creates a new database file named *eventMD-<date>-<time>.sqlite*, where *<date>* is the date the analysis was performed (e.g. 20140929 for Sep 29, 2014) and *<time>* is the analysis start time (e.g. 112937 for 11:29:37 AM).

SQLite_ databases store data in tables similar to spreadsheets, where each table is analogous to a sheet in an Excel spreadsheet. Databased generated by |projname| can be inspected using a database viewer, for example the open source `DB browser for SQLite`_.  |projname| outputs databases with multiple tables as seen from the figure below. Databases output by |projname| contain four tables: i) *analysisinfo* contains general information about the anlysis such as the data path, analysis algorithm etc., ii) *analysissettings* contains a JSON_ formatted string with the analysis settings, iii) *metadata* holds the output of the analysis, and iv) *metadata_t* lists the data types for each column in *metadata*. Two tables most relevant to the analysis (*metadata* and *analysissettings*) are discussed in detail below. 

.. figure:: ../images/sqlstructFig1.png
   :width: 75 %
   :align: center

.. _metadata-table-sec:

Metadata Table
---------------------------------------------

The *metadata* table contains the primary output of the analysis. |projname| processes individual blockade events from a time-series of ionic current. The parameters describing each event (or metadata) are stored in individual rows of the *metadata* table in the database file. The column names describe the metadata and are unique to the processing algorithm used. For example, the column names for the :ref:`stepresponse-page` algorithm are shown below. The column names for :ref:`multistate-page` differ from this list. 

.. sourcecode:: javascript

    {
        ProcessingStatus, 
        OpenChCurrent, 
        BlockedCurrent,
        EventStart,
        EventEnd,
        BlockDepth,
        ResTime,
        RiseTime,
        AbsEventStart,
        RedChiSq,
        TimeSeries
    }

Note that the column names can be used in constructing queries passed to SQLite, and is described in more detail in the :ref:`working-with-sqlite-sec` section and the :ref:`scripting-page` section. The first example SQL query below returns the *BlockDepth* column (ratio of *BlockedCurrent* to *OpenChCurrent*). One can imagine assembling more complex queries for example restricting the results to events whose residence time is greater than 0.2 ms as seen from the second example query below.

.. sourcecode:: sql

    select BlockDepth from metadata where ProcessingStatus='normal'

    select BlockDepth from metadata where ProcessingStatus='normal' and ResTime > 0.2

A typical *metadata* table for the :ref:`stepresponse-page` algorithm is shown below. The *ProcessingStatus* column is a text field that should read *normal* if the fit for a particular event was successful. If a failure occurred the corresponding error code (e.g. *eInvalidFitParameters*) is stored and all other columns (except *TimeSeries*) are set to -1. If event time-series storage was requested, then the *TimeSeries* column will store the ionic current data for that entry in binary format.

.. figure:: ../images/sqlstructFig2.png
   :width: 75 %
   :align: center

.. _settings-table-sec:

Analysis Settings Table
---------------------------------------------

The *analysissettings* table contains a single text entry that stores the settings file for the analysis. This allows any database opened with the |projname| GUI to retrieve settings that correspond to the analysis results in the file. As seen from the figure below, the settings file is in the JSON_ format as described in the :ref:`settings-page` documentation.

.. figure:: ../images/sqlstructFig3.png
   :width: 75 %
   :align: center

.. include:: ../doc/WorkingWithSQLite.rst

Export to CSV
---------------------------------------------

.. figure:: ../images/dbExport.png
    :width: 25%
    :align: center


.. figure:: ../images/dbExportSQL.png
    :width: 25%
    :align: center

.. include:: ../aliases.rst
