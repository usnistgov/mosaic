# -*- coding: utf-8 -*-
"""
Intan Technologies RHD file format implementation.  

	:Created: 2/22/2020
	:Author: 	Arvind Balijepalli <arvind.balijepalli@nist.gov>
	:License:	See LICENSE.TXT
	:ChangeLog:
	.. line-block::
		2/22/20     AB 	Initial version
"""
import struct

import mosaic.trajio.metaTrajIO as metaTrajIO
import mosaic.utilities.mosaicLogging as mlog

import mosaic.trajio.intanRHD.intanRHD as rhd

import numpy as np

__all__ = ["rhdTrajIO", "InvalidDataColumnError"]

class InvalidDataColumnError(Exception):
	pass

class rhdTrajIO(metaTrajIO.metaTrajIO):
	"""
		Read a binary file generated by Intan RHD amplifiers (see http://intantech.com/RHD_headstages.html).

		:Usage and Assumptions:

				Binary data from a single amplifier is returned.
				

				.. code-block:: javascript

					"rhdTrajIO": {
						"filter": "*.rhd", 
						"ChannelNumber": 0
					}
		
		:Parameters:
				In addition to :class:`~mosaic.metaTrajIO.metaTrajIO` args,
					
					- `ChannelNumber` :	 Channel number of the data stream that will be read.
		:Returns:
				None
		:Errors:
				None
	"""
	def _init(self, **kwargs):
		if not hasattr(self, 'ChannelNumber'):
			raise metaTrajIO.InsufficientArgumentsError("{0} requires the channel number to be defined.".format(type(self).__name__))

		# additional meta data
		self.fileFormat='bin'

		self.SamplingFrequency=0


		self.rhdLogger=mlog.mosaicLogging().getLogger(name=__name__)

	def readdata(self, fname):
		"""
			Return raw data from a single data file. Set a class 
			attribute Fs with the sampling frequency in Hz.

			:Parameters:

				- `fname` :  fileame to read
			
			:Returns:
			
				- An array object that holds raw (unscaled) data from `fname`
			
			:Errors:

				None
		"""
		data=rhd.read_data(fname)
	
		self.SamplingFrequency=data["frequency_parameters"]["amplifier_sample_rate"]
		self.Fs=data["frequency_parameters"]["amplifier_sample_rate"]

		print(self.SamplingFrequency)

		return data["amplifier_data"][self.ChannelNumber]
		
	def _formatsettings(self):
		"""
			Populate `logObject` with settings strings for display

			:Parameters:

				- `logObject` : 	a object that holds logging text (see :class:`~mosaic.utilities.mosaicLog.mosaicLog`)				
		"""
		self.rhdLogger.info( '\t\tChannel Number = {0}'.format(self.ChannelNumber) )		


if __name__ == '__main__':
	b=rhdTrajIO(
			dirname='/Users/arvind/Research/Experiments/NeuronSensing/IntanData/20200221', 
			filter='*rhd',
			ChannelNumber=14
		)

	d=b.popdata(100)
	print(d)

	print(b.FsHz)
	print(b.DataLengthSec)
	
	# for i in range(100):
	# 	d=b.popdata(100000)
	# 	print(i, len(d)/100000., d[0], d[-1], np.mean(d), os.path.basename(b.LastFileProcessed))





